import { execSync } from "child_process";
import { readFileSync, writeFileSync, existsSync } from "fs";

/**
 * Utility functions for managing Google Apps Script deployments
 */

/**
 * Executes a shell command and returns the output
 * @param {string} command - The command to execute
 * @param {object} options - Execution options
 * @returns {string} Command output
 */
export function exec(command, options = {}) {
  try {
    return execSync(command, { encoding: "utf8", ...options });
  } catch (error) {
    throw new Error(`Command failed: ${command}\n${error.message}`);
  }
}

/**
 * Loads environment variables from .env file
 * @returns {object} Environment variables
 */
export function loadEnv() {
  if (!existsSync(".env")) {
    return {};
  }

  const envContent = readFileSync(".env", "utf8");
  const env = {};

  for (const line of envContent.split("\n")) {
    const trimmed = line.trim();
    if (!trimmed || trimmed.startsWith("#")) continue;

    const [key, ...valueParts] = trimmed.split("=");
    if (key && valueParts.length > 0) {
      env[key.trim()] = valueParts.join("=").trim();
    }
  }

  return env;
}

/**
 * Saves environment variables to .env file
 * @param {object} env - Environment variables to save
 */
export function saveEnv(env) {
  const lines = [
    "# Apps Script Deployment Configuration",
    "# This file is automatically generated and updated by deployment scripts.",
    "",
    "# Staging deployment (@HEAD)",
    `STAGING_DEPLOYMENT_ID=${env.STAGING_DEPLOYMENT_ID || ""}`,
    "",
    "# Production deployment (versioned)",
    `PROD_DEPLOYMENT_ID=${env.PROD_DEPLOYMENT_ID || ""}`,
  ];

  writeFileSync(".env", lines.join("\n") + "\n");
}

/**
 * Fetches all deployments from Apps Script
 * @returns {Array} List of deployments
 */
export function getDeployments() {
  try {
    const output = exec("clasp list-deployments --json");
    return JSON.parse(output);
  } catch (error) {
    console.error("‚ùå Failed to fetch deployments:", error.message);
    process.exit(1);
  }
}

/**
 * Finds the @HEAD deployment
 * @param {Array} deployments - List of deployments
 * @returns {object|null} @HEAD deployment or null
 */
export function findHeadDeployment(deployments) {
  return (
    deployments?.find(
      (d) =>
        !d.deploymentConfig?.versionNumber ||
        d.deploymentConfig.versionNumber === "HEAD"
    ) || null
  );
}

/**
 * Finds the first versioned (non-@HEAD) deployment
 * @param {Array} deployments - List of deployments
 * @returns {object|null} Versioned deployment or null
 */
export function findVersionedDeployment(deployments) {
  return (
    deployments?.find(
      (d) =>
        d.deploymentConfig?.versionNumber &&
        d.deploymentConfig.versionNumber !== "HEAD"
    ) || null
  );
}

/**
 * Opens a web app deployment in the browser
 * @param {string} deploymentId - The deployment ID to open
 */
export function openWebApp(deploymentId) {
  try {
    exec(`clasp open-web-app ${deploymentId}`, { stdio: "inherit" });
  } catch (error) {
    console.error("‚ùå Failed to open web app:", error.message);
    process.exit(1);
  }
}

/**
 * Creates a new versioned deployment
 */
export function createDeployment() {
  try {
    console.log("üÜï Creating new versioned deployment...");
    console.log(
      "‚ÑπÔ∏è  Note: @HEAD deployment is updated automatically by `clasp push`"
    );
    exec("clasp create-deployment", { stdio: "inherit" });
    console.log("‚úÖ New versioned deployment created successfully");
  } catch (error) {
    console.error("‚ùå Deployment creation failed:", error.message);
    process.exit(1);
  }
}

/**
 * Updates an existing deployment
 * @param {string} deploymentId - The deployment ID to update
 */
export function updateDeployment(deploymentId) {
  try {
    exec(`clasp update-deployment ${deploymentId}`, { stdio: "inherit" });
    console.log("‚úÖ Deployment updated successfully");
  } catch (error) {
    console.error("‚ùå Deployment update failed:", error.message);
    process.exit(1);
  }
}

/**
 * Deletes a deployment
 * @param {string} deploymentId - The deployment ID to delete
 */
export function deleteDeployment(deploymentId) {
  try {
    exec(`clasp delete-deployment ${deploymentId}`, { stdio: "inherit" });
    console.log("‚úÖ Deployment deleted successfully");
  } catch (error) {
    console.error("‚ùå Deployment deletion failed:", error.message);
    process.exit(1);
  }
}

/**
 * Recreates the production deployment (deletes all versioned deployments and creates a new one)
 */
export function recreateProductionDeployment() {
  const deployments = getDeployments();
  const versionedDeployments = deployments.filter(
    (d) =>
      d.deploymentConfig?.versionNumber &&
      d.deploymentConfig.versionNumber !== "HEAD"
  );

  if (versionedDeployments.length > 0) {
    console.log(
      `üóëÔ∏è  Deleting ${versionedDeployments.length} existing versioned deployment(s)...`
    );
    for (const deployment of versionedDeployments) {
      console.log(`   Deleting ${deployment.deploymentId}...`);
      deleteDeployment(deployment.deploymentId);
    }
  }

  console.log("üÜï Creating new production deployment...");
  createDeployment();

  // Update .env with new deployment IDs
  updateDeploymentIds();
}

/**
 * Updates .env file with current deployment IDs
 */
export function updateDeploymentIds() {
  const deployments = getDeployments();
  const headDeployment = findHeadDeployment(deployments);
  const prodDeployment = findVersionedDeployment(deployments);

  const env = loadEnv();
  env.STAGING_DEPLOYMENT_ID = headDeployment?.deploymentId || "";
  env.PROD_DEPLOYMENT_ID = prodDeployment?.deploymentId || "";

  saveEnv(env);

  if (headDeployment && prodDeployment) {
    console.log("‚úÖ Updated .env with deployment IDs:");
    console.log(`   STAGING_DEPLOYMENT_ID=${headDeployment.deploymentId}`);
    console.log(`   PROD_DEPLOYMENT_ID=${prodDeployment.deploymentId}`);
  }
}

/**
 * Gets deployment ID from .env or auto-detects it
 * @param {string} envKey - Environment variable key ('STAGING_DEPLOYMENT_ID' or 'PROD_DEPLOYMENT_ID')
 * @param {Function} findFn - Function to find deployment if not in .env
 * @returns {string|null} Deployment ID or null
 */
export function getDeploymentId(envKey, findFn) {
  const env = loadEnv();

  // Return from .env if exists
  if (env[envKey]) {
    return env[envKey];
  }

  // Auto-detect and save to .env
  console.log(`‚ÑπÔ∏è  ${envKey} not found in .env, auto-detecting...`);
  const deployments = getDeployments();
  const deployment = findFn(deployments);

  if (deployment) {
    env[envKey] = deployment.deploymentId;
    saveEnv(env);
    console.log(`‚úÖ Saved ${envKey}=${deployment.deploymentId} to .env`);
    return deployment.deploymentId;
  }

  return null;
}
